const express = require("express");
const { Configuration, OpenAIApi } = require("openai");
require("dotenv").config();
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const convertapi = require('convertapi')("pNF9OwSHfJVIILhe");

const app = express();
app.use(express.json());

// Ensure the "temp_files" folder exists; create it if not
const tempFilesFolderPath = path.join(__dirname, 'temp_files');
if (!fs.existsSync(tempFilesFolderPath)) {
  fs.mkdirSync(tempFilesFolderPath);
}

// Configure multer to save files to the "temp_files" folder
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, path.join(__dirname, 'temp_files'));
  },
  filename: (req, file, cb) => {
    // Generate a unique filename by adding a timestamp
    const timestamp = Date.now();
    const filename = `${timestamp}-${file.originalname}`;
    cb(null, filename);
  },
});

const upload = multer({ storage });

// Function to extract text using ConvertAPI
async function extractTextFromPDF(pdfFilePath) {
  try {
    const result = await convertapi.convert('txt', { File: pdfFilePath }, 'pdf');
    const tempTextFilePath = path.join(__dirname, 'temp_files', 'extracted_text.txt');
    await result.saveFiles(tempTextFilePath);
    const extractedText = require('fs').readFileSync(tempTextFilePath, 'utf-8');
    return extractedText;
  } catch (error) {
    throw error;
  }
}

const configuration = new Configuration({
  apiKey: process.env.API_KEY,
});

const openai = new OpenAIApi(configuration);


app.post("/generate-questions", upload.single('file'), async (req, res) => {
  try {
    const { technology = "AI", experience = "1" } = req.body;

    if (!req.file) {
      return res.status(400).send('No file uploaded.');
    }

    const { filename } = req.file;
    const pdfFilePath = path.join(__dirname, 'temp_files', filename);

    const resumeText = "";

    try {
      resumeText = await extractTextFromPDF(pdfFilePath);
    } catch (error) {
      console.error('Error extracting text:', error);
      res.status(500).send('Error extracting text from the file.');
    }

    const System = `You are a software developer with 5 years of experience in ${technology}. You are taking interview of a candidate who is applying for a ${technology} developer position having ${experience} year of experience. Now you have to generate a set of ten questions based on ${technology} knowledge in Json format.
    
    I have also given the text of the candidate's resume for you to more appropriately generate relevant questions. Here's the text.
    '''
    ${resumeText}
    '''

    Here's the example of how the questions will be generated by you will look like enclosed in tipple quotes. Give me response in the minified Json format such as these examples.
    '''
    [{"id":0,"question":"What is react?"},{"id":1,"question":"What is virtual DOM in react?"},{"id":2,"question":"What is the difference of virtual DOM and actual DOM?"}]
    '''`;



    const completion = await openai.createChatCompletion({
      model: "gpt-3.5-turbo",
      messages: [
        { role: "system", content: System },
        // { role: "user", content: prompt },
      ],
    });

    const answer = completion.data.choices[0].message.content.trim();
    // res.json(answer);
    res.send({ questionList: JSON.parse(answer), usage: completion.data.usage });
  } catch (error) {
    console.error("Error:", error.message);
    res.status(500).json({ error: error });
  }
});

// Define the "/file" endpoint for file upload
app.post('/file', upload.single('file'), async (req, res) => {
  if (!req.file) {
    return res.status(400).send('No file uploaded.');
  }

  const { filename } = req.file;
  const pdfFilePath = path.join(__dirname, 'temp_files', filename);

  try {
    const extractedText = await extractTextFromPDF(pdfFilePath);
    res.status(200).json({ filename, extractedText }); // Send the text in the JSON response
  } catch (error) {
    console.error('Error extracting text:', error);
    res.status(500).send('Error extracting text from the file.');
  }
});

app.post("/analyze", async (req, res) => {
  try {
    const { technology = "AI", experience = "1" } = req.body;

    console.log(technology);
    console.log(experience);

    const System = `You are a software developer with 5 years of experience in react. You are taking interview of a candidate who is applying for a react developer position having 1 year of experience. Now you have to generate an overall rating of the entire interview and how did the candidate performed in terms of deep knowledge in react. Here's the entire conversation in a Json format. In the Json you can find the question asked to the candidate and his answer in natural language. After analysing the entire conversation, you will create a Json object as the analysis result. There's also an example of the analysis Json. Give me response in the Json format such as these examples.
    
    This is the entire conversation.
        '''
    [
        {
            "question": "What is react?",
            "answer": "React was a PHP based language."
        },
        {
            "question": "What is virtual DOM in react?",
            "answer": "Virtual DOM been has a node list which react play to determine the update in UI"
        },
        {
            "question": "What is the difference of virtual DOM and actual DOM?",
            "answer": "null"
        }
    ]
        '''
    Now by taking and analyzing the above JSON array add two keys like communication_skill_of_the_candidate and correctness_of_the_answer with accurate percentage value and then give me the new JSON array excluding the question and answer key for each question.
    
        `;



    const completion = await openai.createChatCompletion({
      model: "gpt-3.5-turbo",
      temperature: 0,
      messages: [
        { role: "system", content: System },
        // { role: "user", content: prompt },
      ],
    });

    const answer = completion.data.choices[0].message.content.trim();
    // res.json(answer);
    res.send(answer);
  } catch (error) {
    console.error("Error:", error.message);
    res.status(500).json({ error: error });
  }
})

const port = 5000;
app.listen(port, () => {
  console.log(`Server listening on port ${port}`);
});
